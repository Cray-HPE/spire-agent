/*
 *
 *  MIT License
 *
 *  (C) Copyright 2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

// Disable pr-merge builds; not used.
if (env.BRANCH_NAME ==~ ~"^PR-\\d+") {
    currentBuild.result = 'SUCCESS'
    echo "Pull-Requests are not built; this is a no-op build."
    return
}

def isStable = env.TAG_NAME != null ? true : false
def sleImage = 'artifactory.algol60.net/csm-docker/stable/csm-docker-sle'
def sleVersion = '15.5' // Keep to 15.5 or lower for older glibc; portability reasons

pipeline {

    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        disableConcurrentBuilds()
        timeout(time: 25, unit: 'MINUTES')
        timestamps()
    }

    environment {
        NAME = getRepoName()
        SPIRE_VERSION = sh(returnStdout: true, script: "git vendor list spire | grep ref | awk '{print \$NF}'").trim()
        BUILD = sh(returnStdout: true, script: "git describe --tags | tr -s '-' '~' | sed 's/^v//'").trim()
        PRIMARY_NODE = "${env.NODE_NAME}"
    }

    stages {
        stage('Build & Publish') {
            matrix {
                axes {
                    axis {
                        name 'ARCH'
                        values 'aarch64', 'x86_64'
                    }
                }

                environment {
                    DOCKER_ARCH = "${env.ARCH == "x86_64" ? "amd64" : "arm64"}"
                    BUILD_DIR = "${env.WORKSPACE}/dist/rpmbuild/${ARCH}"
                }

                stages {
                    stage('Build: setup') {
                        steps {
                            lock('docker-image-pull') {
                                sh "docker pull --platform linux/${DOCKER_ARCH} ${sleImage}:${sleVersion}"
                                sh "docker tag ${sleImage}:${sleVersion} ${sleImage}:${DOCKER_ARCH}"
                            }
                        }
                    }

                    stage('Prepare: RPMs') {
                        agent {
                            docker {
                                label "${PRIMARY_NODE}"
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh --platform linux/${env.DOCKER_ARCH}"
                                image "${sleImage}:${env.DOCKER_ARCH}"
                            }
                        }

                        steps {
                            sh "make prepare"
                            dir("${env.BUILD_DIR}/SPECS/") {
                                runLibraryScript("addRpmMetaData.sh", "${env.NAME}.spec")
                            }
                        }
                    }

                    stage('Build: RPMs') {
                        agent {
                            docker {
                                label "${PRIMARY_NODE}"
                                reuseNode true
                                args "-v /home/jenkins/.ssh:/home/jenkins/.ssh --platform linux/${env.DOCKER_ARCH}"
                                image "${sleImage}:${env.DOCKER_ARCH}"
                            }
                        }

                        steps {
                            sh "make rpm"
                        }
                    }

                    stage('Publish: RPMs') {
                        steps {
                            script {
                                publishCsmRpms(
                                        arch: "${ARCH}",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "noos",
                                        pattern: "dist/rpmbuild/${ARCH}/RPMS/${ARCH}/*.rpm",
                                )
                                publishCsmRpms(
                                        arch: "src",
                                        component: env.NAME,
                                        isStable: isStable,
                                        os: "noos",
                                        pattern: "dist/rpmbuild/${ARCH}/SRPMS/*.rpm",
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
